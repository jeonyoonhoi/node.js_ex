'use strict';

var fs = require('fs');

var _require = require('child_process'),
    spawn = _require.spawn;

// Internal Modules


var debug = require('./debug');

/**
 * Exits the process with a given status,
 * logging a given message before exiting.
 *
 * @param {number} status - exit status
 * @param {string} messages - message to log
 */
function exit(status) {
  for (var _len = arguments.length, messages = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    messages[_key - 1] = arguments[_key];
  }

  if (messages) {
    messages.forEach(function (message) {
      return console.log(message);
    });
  }

  process.exit(status);
}

/**
 * Checks for an active Internet connection by doing a DNS lookup of Microsoft.com.
 *
 * @return {Promise.<boolean>} - True if lookup succeeded (or if we skip the test)
 */
function checkInternetConnection() {
  return new Promise(function (resolve) {
    require('dns').lookup('microsoft.com', function (err) {
      if (err && err.code === 'ENOTFOUND') {
        resolve(false);
      } else {
        resolve(true);
      }
    });
  });
}

/**
 * Checks the current Windows PS1 execution policy. The upgrader requires an unrestricted policy.
 *
 * @return {Promise.<boolean>} - True if unrestricted, false if it isn't
 */
function checkExecutionPolicy() {
  return new Promise(function (resolve, reject) {
    var output = [];
    var child = void 0;

    try {
      debug('Powershell: Attempting to spawn PowerShell child');
      child = spawn('powershell.exe', ['-NoProfile', '-NoLogo', 'Get-ExecutionPolicy']);
    } catch (error) {
      debug('Powershell: Could not spawn PowerShell child');
      reject(error);
    }

    child.stdout.on('data', function (data) {
      debug('PowerShell: Stdout received: ' + data.toString());
      output.push(data.toString());
    });

    child.stderr.on('data', function (data) {
      debug('PowerShell: Stderr received: ' + data.toString());
      output.push(data.toString());
    });

    child.on('exit', function () {
      var linesHit = output.filter(function (line) {
        return line.includes('Unrestricted') || line.includes('RemoteSigned') || line.includes('Bypass');
      });
      var unrestricted = linesHit.length > 0;

      if (!unrestricted) {
        debug('PowerShell: Resolving restricted (false)');
        resolve(false);
      } else {
        debug('PowerShell: Resolving unrestricted (true)');
        resolve(true);
      }
    });

    child.stdin.end();
  });
}

/**
 * Checks if a path exists
 *
 * @param filePath - file path to check
 * @returns {boolean} - does the file path exist?
 */
function isPathAccessible(filePath) {
  try {
    fs.accessSync(filePath);
    debug('Utils: isPathAccessible(): ' + filePath + ' exists');
    return true;
  } catch (err) {
    debug('Utils: isPathAccessible(): ' + filePath + ' does not exist');
    return false;
  }
}

module.exports = {
  checkInternetConnection: checkInternetConnection,
  checkExecutionPolicy: checkExecutionPolicy,
  exit: exit,
  isPathAccessible: isPathAccessible
};
//# sourceMappingURL=utils.js.map