{"version":3,"sources":["../src/versions.js"],"names":["exec","require","nwuVersion","version","getInstalledNPMVersion","Promise","resolve","reject","nodeVersion","err","stdout","Error","replace","getAvailableNPMVersions","error","JSON","parse","getLatestNPMVersion","latest","trim","_getWindowsVersion","command","getVersions","versions","process","prettyVersions","os","platform","arch","variable","hasOwnProperty","push","windowsVersion","join","module","exports"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,eAAR,EAAyBD,IAAtC;AACA,IAAME,aAAaD,QAAQ,iBAAR,EAA2BE,OAA9C;;AAEA;;;;AAIA,SAASC,sBAAT,GAAmC;AACjC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,oBAAJ;;AAEAR,SAAK,QAAL,EAAe,UAACS,GAAD,EAAMC,MAAN,EAAiB;AAC9B,UAAID,GAAJ,EAAS;AACPF,eAAO,IAAII,KAAJ,CAAU,kCAAV,CAAP;AACD,OAFD,MAEO;AACLH,sBAAcE,OAAOE,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAd;AACAN,gBAAQE,WAAR;AACD;AACF,KAPD;AAQD,GAXM,CAAP;AAYD;;AAED;;;;AAIA,SAASK,uBAAT,GAAoC;AAClC,SAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCP,SAAK,8BAAL,EAAqC,UAACS,GAAD,EAAMC,MAAN,EAAiB;AACpD,UAAID,GAAJ,EAAS;AACP,YAAIK,QAAQ,6EAAZ;AACAA,iBAAS,gFAAT;AACA,eAAOP,OAAOO,KAAP,CAAP;AACD;;AAEDR,cAAQS,KAAKC,KAAL,CAAWN,MAAX,CAAR;AACD,KARD;AASD,GAVM,CAAP;AAWD;;AAED;;;;AAIA,SAASO,mBAAT,GAAgC;AAC9B,SAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCP,SAAK,sBAAL,EAA6B,UAACS,GAAD,EAAMC,MAAN,EAAiB;AAC5C,UAAID,GAAJ,EAAS;AACP,YAAIK,QAAQ,6EAAZ;AACAA,iBAAS,gFAAT;AACA,eAAOP,OAAOO,KAAP,CAAP;AACD;;AAED,UAAII,SAASR,OAAOE,OAAP,CAAe,gBAAf,EAAiC,EAAjC,CAAb;;AAEAN,cAAQY,OAAOC,IAAP,EAAR;AACD,KAVD;AAWD,GAZM,CAAP;AAaD;;AAED;;;AAGA,SAASC,kBAAT,GAA+B;AAC7B,SAAO,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMc,UAAU,sDAAhB;AACArB,SAAKqB,OAAL,EAAc,UAACP,KAAD,EAAQJ,MAAR,EAAmB;AAC/B,UAAII,KAAJ,EAAW;AACTP,eAAOO,KAAP;AACD,OAFD,MAEO;AACLR,gBAAQI,MAAR;AACD;AACF,KAND;AAOD,GATM,CAAP;AAUD;;AAED;;;AAGA,SAAeY,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,kBADN,GACiBC,QAAQD,QADzB;AAEME,wBAFN,GAEuB,EAFvB;;AAGEF,mBAASG,EAAT,GAAcF,QAAQG,QAAR,GAAmB,GAAnB,GAAyBH,QAAQI,IAA/C;;AAEA,eAASC,QAAT,IAAqBN,QAArB,EAA+B;AAC7B,gBAAIA,SAASO,cAAT,CAAwBD,QAAxB,CAAJ,EAAuC;AACrCJ,6BAAeM,IAAf,CAAuBF,QAAvB,UAAoCN,SAASM,QAAT,CAApC;AACD;AACF;;AATH;AAAA;AAAA,0CAYiCT,oBAZjC;;AAAA;AAYUY,wBAZV;;AAaIP,yBAAeM,IAAf,CAAoBC,eAAepB,OAAf,CAAuB,MAAvB,EAA+B,GAA/B,CAApB,EAbJ,CAa6D;AAb7D;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAoBSa,eAAeQ,IAAf,CAAoB,KAApB,CApBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBAC,OAAOC,OAAP,GAAiB;AACfjC,wBADe;AAEfE,gDAFe;AAGfa,0CAHe;AAIfJ,kDAJe;AAKfS;AALe,CAAjB","file":"versions.js","sourcesContent":["const exec = require('child_process').exec\nconst nwuVersion = require('../package.json').version\n\n/**\n * Gets the currently installed version of npm (npm -v)\n * @return {Promise.<string>} - Installed version of npm\n */\nfunction getInstalledNPMVersion () {\n  return new Promise((resolve, reject) => {\n    let nodeVersion\n\n    exec('npm -v', (err, stdout) => {\n      if (err) {\n        reject(new Error('Could not determine npm version.'))\n      } else {\n        nodeVersion = stdout.replace(/\\n/, '')\n        resolve(nodeVersion)\n      }\n    })\n  })\n}\n\n/**\n * Fetches the published versions of npm from the npm registry\n * @return {Promise.<versions[]>} - Array of the available versions\n */\nfunction getAvailableNPMVersions () {\n  return new Promise((resolve, reject) => {\n    exec('npm view npm versions --json', (err, stdout) => {\n      if (err) {\n        let error = 'We could not show latest available versions. Try running this script again '\n        error += 'with the version you want to install (npm-windows-upgrade --npm-version 3.0.0)'\n        return reject(error)\n      }\n\n      resolve(JSON.parse(stdout))\n    })\n  })\n}\n\n/**\n * Fetches the published versions of npm from the npm registry\n * @return {Promise.<version>} - Array of the available versions\n */\nfunction getLatestNPMVersion () {\n  return new Promise((resolve, reject) => {\n    exec('npm show npm version', (err, stdout) => {\n      if (err) {\n        let error = 'We could not show latest available versions. Try running this script again '\n        error += 'with the version you want to install (npm-windows-upgrade --npm-version 3.0.0)'\n        return reject(error)\n      }\n\n      let latest = stdout.replace(/(\\r\\n|\\n|\\r)/gm, '')\n\n      resolve(latest.trim())\n    })\n  })\n}\n\n/**\n * Get the current name and version of Windows\n */\nfunction _getWindowsVersion () {\n  return new Promise((resolve, reject) => {\n    const command = 'systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"'\n    exec(command, (error, stdout) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(stdout)\n      }\n    })\n  })\n}\n\n/**\n * Get installed versions of virtually everything important\n */\nasync function getVersions () {\n  let versions = process.versions\n  let prettyVersions = []\n  versions.os = process.platform + ' ' + process.arch\n\n  for (let variable in versions) {\n    if (versions.hasOwnProperty(variable)) {\n      prettyVersions.push(`${variable}: ${versions[variable]}`)\n    }\n  }\n\n  try {\n    const windowsVersion = await _getWindowsVersion()\n    prettyVersions.push(windowsVersion.replace(/  +/g, ' ')) // eslint-disable-line no-regex-spaces\n  } catch (error) {\n    // Do nothing, we're okay with this failing.\n    // Most common reason is we're not on an english\n    // Windows.\n  }\n\n  return prettyVersions.join(' | ')\n}\n\nmodule.exports = {\n  nwuVersion,\n  getInstalledNPMVersion,\n  getLatestNPMVersion,\n  getAvailableNPMVersions,\n  getVersions\n}\n"]}