{"version":3,"sources":["../src/powershell.js"],"names":["require","spawn","path","debug","runUpgrade","version","npmPath","Promise","resolve","reject","scriptPath","__dirname","psArgs","args","process","env","DEBUG","push","stdout","stderr","child","error","on","data","toString","stdin","end","runSimpleUpgrade","npmCommand","module","exports"],"mappings":";;eAAgBA,QAAQ,eAAR,C;IAATC,K,YAAAA,K;;AACP,IAAMC,OAAOF,QAAQ,MAAR,CAAb;;AAEA,IAAMG,QAAQH,QAAQ,SAAR,CAAd;;AAEA;;;;;;AAMA,SAASI,UAAT,CAAqBC,OAArB,EAA8BC,OAA9B,EAAuC;AACrC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,aAAaR,KAAKM,OAAL,CAAaG,SAAb,EAAwB,+BAAxB,CAAnB;AACA,QAAMC,SAASN,YAAY,IAAZ,eACFI,UADE,sBACuBL,OADvB,wBAEFK,UAFE,sBAEuBL,OAFvB,uBAE8CC,OAF9C,SAAf;AAGA,QAAMO,OAAO,CAAE,kBAAF,EAAsB,QAAtB,EAAgC,YAAhC,EAA8C,SAA9C,EAAyDD,MAAzD,CAAb;;AAEA,QAAIE,QAAQC,GAAR,CAAYC,KAAhB,EAAuB;AACrBH,WAAKI,IAAL,CAAU,QAAV;AACD;;AAED,QAAIC,SAAS,EAAb;AACA,QAAIC,SAAS,EAAb;AACA,QAAIC,cAAJ;;AAEA,QAAI;AACFA,cAAQnB,MAAM,gBAAN,EAAwBY,IAAxB,CAAR;AACD,KAFD,CAEE,OAAOQ,KAAP,EAAc;AACd,aAAOZ,OAAOY,KAAP,CAAP;AACD;;AAEDD,UAAMF,MAAN,CAAaI,EAAb,CAAgB,MAAhB,EAAwB,UAACC,IAAD,EAAU;AAChCpB,YAAM,kCAAkCoB,KAAKC,QAAL,EAAxC;AACAN,aAAOD,IAAP,CAAYM,KAAKC,QAAL,EAAZ;AACD,KAHD;;AAKAJ,UAAMD,MAAN,CAAaG,EAAb,CAAgB,MAAhB,EAAwB,UAACC,IAAD,EAAU;AAChCpB,YAAM,kCAAkCoB,KAAKC,QAAL,EAAxC;AACAL,aAAOF,IAAP,CAAYM,KAAKC,QAAL,EAAZ;AACD,KAHD;;AAKAJ,UAAME,EAAN,CAAS,MAAT,EAAiB;AAAA,aAAMd,QAAQ,EAACW,cAAD,EAASD,cAAT,EAAR,CAAN;AAAA,KAAjB;AACAE,UAAMK,KAAN,CAAYC,GAAZ;AACD,GAjCM,CAAP;AAkCD;;AAED;;;;;AAKA,SAASC,gBAAT,CAA2BtB,OAA3B,EAAoC;AAClC,SAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,QAAIoB,aAAcvB,OAAD,2BAAkCA,OAAlC,GAA8C,oBAA/D;AACA,QAAIa,SAAS,EAAb;AACA,QAAIC,SAAS,EAAb;AACA,QAAIC,cAAJ;;AAEA,QAAI;AACFA,cAAQnB,MAAM,gBAAN,EAAwB,CAAE,YAAF,EAAgB,SAAhB,EAA2B2B,UAA3B,CAAxB,CAAR;AACD,KAFD,CAEE,OAAOP,KAAP,EAAc;AACd;AACAb,cAAQ,EAAEa,YAAF,EAAR;AACD;;AAEDD,UAAMF,MAAN,CAAaI,EAAb,CAAgB,MAAhB,EAAwB,UAACC,IAAD;AAAA,aAAUL,OAAOD,IAAP,CAAYM,KAAKC,QAAL,EAAZ,CAAV;AAAA,KAAxB;AACAJ,UAAMD,MAAN,CAAaG,EAAb,CAAgB,MAAhB,EAAwB,UAACC,IAAD;AAAA,aAAUJ,OAAOF,IAAP,CAAYM,KAAKC,QAAL,EAAZ,CAAV;AAAA,KAAxB;;AAEAJ,UAAME,EAAN,CAAS,MAAT,EAAiB;AAAA,aAAMd,QAAQ,EAAEW,cAAF,EAAUD,cAAV,EAAR,CAAN;AAAA,KAAjB;;AAEAE,UAAMK,KAAN,CAAYC,GAAZ;AACD,GAnBM,CAAP;AAoBD;;AAEDG,OAAOC,OAAP,GAAiB;AACf1B,wBADe;AAEfuB;AAFe,CAAjB","file":"powershell.js","sourcesContent":["const {spawn} = require('child_process')\nconst path = require('path')\n\nconst debug = require('./debug')\n\n/**\n * Executes the PS1 script upgrading npm\n * @param  {string} version - The version to be installed (npm install npm@{version})\n * @param  {string} npmPath - Path to Node installation (optional)\n * @return {Promise.<stderr[], stdout[]>} - stderr and stdout received from the PS1 process\n */\nfunction runUpgrade (version, npmPath) {\n  return new Promise((resolve, reject) => {\n    const scriptPath = path.resolve(__dirname, '../powershell/upgrade-npm.ps1')\n    const psArgs = npmPath === null\n      ? `& {& '${scriptPath}' -version '${version}' }`\n      : `& {& '${scriptPath}' -version '${version}' -NodePath '${npmPath}' }`\n    const args = [ '-ExecutionPolicy', 'Bypass', '-NoProfile', '-NoLogo', psArgs ]\n\n    if (process.env.DEBUG) {\n      args.push('-debug')\n    }\n\n    let stdout = []\n    let stderr = []\n    let child\n\n    try {\n      child = spawn('powershell.exe', args)\n    } catch (error) {\n      return reject(error)\n    }\n\n    child.stdout.on('data', (data) => {\n      debug('PowerShell: Stdout received: ' + data.toString())\n      stdout.push(data.toString())\n    })\n\n    child.stderr.on('data', (data) => {\n      debug('PowerShell: Stderr received: ' + data.toString())\n      stderr.push(data.toString())\n    })\n\n    child.on('exit', () => resolve({stderr, stdout}))\n    child.stdin.end()\n  })\n}\n\n/**\n * Executes 'npm install -g npm' upgrading npm\n * @param  {string} version - The version to be installed (npm install npm@{version})\n * @return {Promise.<stderr[], stdout[]>} - stderr and stdout received from the PS1 process\n */\nfunction runSimpleUpgrade (version) {\n  return new Promise((resolve) => {\n    let npmCommand = (version) ? `npm install -g npm@${version}` : 'npm install -g npm'\n    let stdout = []\n    let stderr = []\n    let child\n\n    try {\n      child = spawn('powershell.exe', [ '-NoProfile', '-NoLogo', npmCommand ])\n    } catch (error) {\n      // This is dirty, but the best way for us to try/catch right now\n      resolve({ error })\n    }\n\n    child.stdout.on('data', (data) => stdout.push(data.toString()))\n    child.stderr.on('data', (data) => stderr.push(data.toString()))\n\n    child.on('exit', () => resolve({ stderr, stdout }))\n\n    child.stdin.end()\n  })\n}\n\nmodule.exports = {\n  runUpgrade,\n  runSimpleUpgrade\n}\n"]}