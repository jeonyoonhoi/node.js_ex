'use strict';

var _require = require('child_process'),
    spawn = _require.spawn;

var path = require('path');

var debug = require('./debug');

/**
 * Executes the PS1 script upgrading npm
 * @param  {string} version - The version to be installed (npm install npm@{version})
 * @param  {string} npmPath - Path to Node installation (optional)
 * @return {Promise.<stderr[], stdout[]>} - stderr and stdout received from the PS1 process
 */
function runUpgrade(version, npmPath) {
  return new Promise(function (resolve, reject) {
    var scriptPath = path.resolve(__dirname, '../powershell/upgrade-npm.ps1');
    var psArgs = npmPath === null ? '& {& \'' + scriptPath + '\' -version \'' + version + '\' }' : '& {& \'' + scriptPath + '\' -version \'' + version + '\' -NodePath \'' + npmPath + '\' }';
    var args = ['-ExecutionPolicy', 'Bypass', '-NoProfile', '-NoLogo', psArgs];

    if (process.env.DEBUG) {
      args.push('-debug');
    }

    var stdout = [];
    var stderr = [];
    var child = void 0;

    try {
      child = spawn('powershell.exe', args);
    } catch (error) {
      return reject(error);
    }

    child.stdout.on('data', function (data) {
      debug('PowerShell: Stdout received: ' + data.toString());
      stdout.push(data.toString());
    });

    child.stderr.on('data', function (data) {
      debug('PowerShell: Stderr received: ' + data.toString());
      stderr.push(data.toString());
    });

    child.on('exit', function () {
      return resolve({ stderr: stderr, stdout: stdout });
    });
    child.stdin.end();
  });
}

/**
 * Executes 'npm install -g npm' upgrading npm
 * @param  {string} version - The version to be installed (npm install npm@{version})
 * @return {Promise.<stderr[], stdout[]>} - stderr and stdout received from the PS1 process
 */
function runSimpleUpgrade(version) {
  return new Promise(function (resolve) {
    var npmCommand = version ? 'npm install -g npm@' + version : 'npm install -g npm';
    var stdout = [];
    var stderr = [];
    var child = void 0;

    try {
      child = spawn('powershell.exe', ['-NoProfile', '-NoLogo', npmCommand]);
    } catch (error) {
      // This is dirty, but the best way for us to try/catch right now
      resolve({ error: error });
    }

    child.stdout.on('data', function (data) {
      return stdout.push(data.toString());
    });
    child.stderr.on('data', function (data) {
      return stderr.push(data.toString());
    });

    child.on('exit', function () {
      return resolve({ stderr: stderr, stdout: stdout });
    });

    child.stdin.end();
  });
}

module.exports = {
  runUpgrade: runUpgrade,
  runSimpleUpgrade: runSimpleUpgrade
};
//# sourceMappingURL=powershell.js.map