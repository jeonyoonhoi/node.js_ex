{"version":3,"sources":["../src/find-npm.js"],"names":["require","spawn","exec","fs","path","utils","debug","strings","_getPathFromNpm","Promise","resolve","err","stdout","npmPath","replace","_getPathFromPowerShell","psArgs","args","child","stderr","on","data","toString","push","cmdPath","trim","length","slice","stdin","end","_getPath","all","then","results","fromNpm","fromPowershell","fromPowershellPath","join","fromNpmPath","isFromPowershell","isPathAccessible","isFromNpm","message","npmFoundIn","npmNotFoundGuessing","_checkPath","reject","lstat","stats","isDirectory","Error","givenPathNotValid","givenPathValid","findNpm","module","exports"],"mappings":"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","file":"find-npm.js","sourcesContent":["const { spawn, exec } = require('child_process')\nconst fs = require('fs')\nconst path = require('path')\n\nconst utils = require('./utils')\nconst debug = require('./debug')\nconst strings = require('./strings')\n\n/**\n * Attempts to get npm's path by calling out to \"npm config\"\n *\n * @returns {Promise.<string>} - Promise that resolves with the found path (or null if not found)\n */\nfunction _getPathFromNpm () {\n  return new Promise((resolve) => {\n    exec('npm config --global get prefix', (err, stdout) => {\n      if (err) {\n        resolve(null)\n      } else {\n        const npmPath = stdout.replace(/\\n/, '')\n        debug(`PowerShell: _getPathFromNpm() resolving with: ${npmPath}`)\n        resolve(npmPath)\n      }\n    })\n  })\n}\n\n/**\n * Attempts to get npm's path by calling out to \"Get-Command npm\"\n *\n * @returns {Promise.<string>} - Promise that resolves with the found path (or null if not found)\n */\nfunction _getPathFromPowerShell () {\n  return new Promise(resolve => {\n    const psArgs = 'Get-Command npm | Select-Object -ExpandProperty Definition'\n    const args = [ '-NoProfile', '-NoLogo', psArgs ]\n    const child = spawn('powershell.exe', args)\n\n    let stdout = []\n    let stderr = []\n\n    child.stdout.on('data', (data) => {\n      debug(`PowerShell: Stdout received: ${data.toString()}`)\n      stdout.push(data.toString())\n    })\n\n    child.stderr.on('data', (data) => {\n      debug(`PowerShell: Stderr received: ${data.toString()}`)\n      stderr.push(data.toString())\n    })\n\n    child.on('exit', () => {\n      const cmdPath = (stdout[0] && stdout[0].trim) ? stdout[0].trim() : null\n\n      if (stderr.length === 0 && cmdPath && cmdPath.slice(cmdPath.length - 7) === 'npm.cmd') {\n        // We're probably installed in a location like C:\\Program Files\\nodejs\\npm.cmd,\n        // meaning that we should not use the global prefix installation location\n        const npmPath = cmdPath.slice(0, cmdPath.length - 8)\n        debug(`PowerShell: _getPathFromPowerShell() resolving with: ${npmPath}`)\n        resolve(npmPath)\n      } else {\n        resolve(null)\n      }\n    })\n\n    child.stdin.end()\n  })\n}\n\n/**\n * Attempts to get the current installation location of npm by looking up the global prefix.\n * Prefer PowerShell, be falls back to npm's opinion\n *\n * @return {Promise.<string>} - NodeJS installation path\n */\nfunction _getPath () {\n  return Promise.all([_getPathFromPowerShell(), _getPathFromNpm()])\n    .then((results) => {\n      const fromNpm = results[1] || ''\n      const fromPowershell = results[0] || ''\n\n      // Quickly check if there's an npm folder in there\n      const fromPowershellPath = path.join(fromPowershell, 'node_modules', 'npm')\n      const fromNpmPath = path.join(fromNpm, 'node_modules', 'npm')\n      const isFromPowershell = utils.isPathAccessible(fromPowershellPath)\n      const isFromNpm = utils.isPathAccessible(fromNpmPath)\n\n      // Found in...\n      // Powershell: -> return powershell path\n      // npm:        -> return npm path\n      // nowhere:    -> return powershell path\n      if (isFromPowershell) {\n        return {\n          path: fromPowershell,\n          message: strings.npmFoundIn(fromPowershell, fromNpm, fromPowershell)\n        }\n      } else if (isFromNpm) {\n        return {\n          path: fromNpm,\n          message: strings.npmFoundIn(fromPowershell, fromNpm, fromNpm)\n        }\n      } else {\n        return {\n          path: fromPowershell,\n          message: strings.npmNotFoundGuessing(fromPowershell, fromNpm, fromPowershell)\n        }\n      }\n    })\n}\n\n/**\n * Attempts to get npm's path by calling out to \"npm config\"\n *\n * @param  {string} npmPath - Input path if given by user\n * @returns {Promise.<string>}\n */\nfunction _checkPath (npmPath) {\n  return new Promise((resolve, reject) => {\n    if (npmPath) {\n      fs.lstat(npmPath, (err, stats) => {\n        if (err || !stats || (stats.isDirectory && !stats.isDirectory())) {\n          reject(new Error(strings.givenPathNotValid(npmPath)))\n        } else {\n          resolve({\n            path: npmPath,\n            message: strings.givenPathValid(npmPath)\n          })\n        }\n      })\n    } else {\n      reject(new Error('Called _checkPath() with insufficient parameters'))\n    }\n  })\n}\n\n/**\n * Finds npm - either by checking a given path, or by\n * asking the system for the location\n *\n * @param {string} npmPath - Input path if given by user\n * @returns {Promise.<string>}\n */\nfunction findNpm (npmPath) {\n  if (npmPath) {\n    return _checkPath(npmPath)\n  } else {\n    return _getPath()\n  }\n}\n\nmodule.exports = findNpm\n"]}